library(roxygen2)
library(devtools)
rm(list = ls()) # cleans current environment
gc() # releases memory removed above
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
# install preliminary package for function testing and documentation inspection
# setting build_vignettes = FALSE will considerably speed up installation.
# if built with vignettes, use browseVignettes("pkgname") to view.
devtools::install(build_vignettes = FALSE)
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
#### compile_pkg.R ####
# This file is meant for recompilation during development.
# For regular installation use devtools::install_github("user/pkgname")
# Use build_vignettes = TRUE in install_github to get html vignettes
library(roxygen2)
library(devtools)
rm(list = ls()) # cleans current environment
gc() # releases memory removed above
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
# install preliminary package for function testing and documentation inspection
# setting build_vignettes = FALSE will considerably speed up installation.
# if built with vignettes, use browseVignettes("pkgname") to view.
devtools::install(build_vignettes = FALSE)
getLoadedDLLs()
install.packages(c("backports", "broom", "callr", "codetools", "commonmark", "ddalpha", "httpuv", "httr", "jsonlite", "knitr", "markdown", "pillar", "processx", "ps", "rmarkdown"))
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
library(roxygen2)
getDLLRegisteredRoutines()
getDLLRegisteredRoutines("ztools")
getDLLRegisteredRoutines("ramses")
getDLLRegisteredRoutines("Rcpp")
pkgbuild::compile_dll()
#### compile_pkg.R ####
# This file is meant for recompilation during development.
# For regular installation use devtools::install_github("user/pkgname")
# Use build_vignettes = TRUE in install_github to get html vignettes
library(roxygen2)
library(devtools)
rm(list = ls()) # cleans current environment
gc() # releases memory removed above
# pkgbuild::compile_dll() #run if DLL error occurs
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
# install preliminary package for function testing and documentation inspection
# setting build_vignettes = FALSE will considerably speed up installation.
# if built with vignettes, use browseVignettes("pkgname") to view.
devtools::install(build_vignettes = FALSE)
#### compile_pkg.R ####
# This file is meant for recompilation during development.
# For regular installation use devtools::install_github("user/pkgname")
# Use build_vignettes = TRUE in install_github to get html vignettes
library(roxygen2)
library(devtools)
rm(list = ls()) # cleans current environment
gc() # releases memory removed above
# pkgbuild::compile_dll() #run if DLL error occurs
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
# install preliminary package for function testing and documentation inspection
# setting build_vignettes = FALSE will considerably speed up installation.
# if built with vignettes, use browseVignettes("pkgname") to view.
devtools::install(build_vignettes = FALSE)
library(microbenchmark)
library(ztools)
)
library(devtools)
library(roxygen2)
library(devtools)
rm(list = ls()) # cleans current environment
gc() # releases memory removed above
# pkgbuild::compile_dll() #run if DLL error occurs
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
# pkgbuild::compile_dll() #run if DLL error occurs
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
#### compile_pkg.R ####
# This file is meant for recompilation during development.
# For regular installation use devtools::install_github("user/pkgname")
# Use build_vignettes = TRUE in install_github to get html vignettes
library(roxygen2)
library(devtools)
rm(list = ls()) # cleans current environment
gc() # releases memory removed above
# pkgbuild::compile_dll() #run if DLL error occurs
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
# install preliminary package for function testing and documentation inspection
# setting build_vignettes = FALSE will considerably speed up installation.
# if built with vignettes, use browseVignettes("pkgname") to view.
devtools::install(build_vignettes = FALSE)
Rcpp::compileAttributes()
#### compile_pkg.R ####
# This file is meant for recompilation during development.
# For regular installation use devtools::install_github("user/pkgname")
# Use build_vignettes = TRUE in install_github to get html vignettes
library(roxygen2)
library(devtools)
rm(list = ls()) # cleans current environment
gc() # releases memory removed above
# pkgbuild::compile_dll() #run if DLL error occurs
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
# install preliminary package for function testing and documentation inspection
# setting build_vignettes = FALSE will considerably speed up installation.
# if built with vignettes, use browseVignettes("pkgname") to view.
devtools::install(build_vignettes = FALSE)
library(microbenchmark)
microbenchmark(mvtnorm::dmvnorm(1:100,1:100,chol2inv(chol(diag(100)))), ztools::dmnorm(1:100,1:100,diag(100), is_prec = TRUE))
microbenchmark(mvtnorm::dmvnorm(1:100,1:100,chol2inv(chol(diag(100)))), ztools::dmnorm(matrix(1:100,nrow = 1),1:100,diag(100), is_prec = TRUE))
microbenchmark(mvtnorm::dmvnorm(1:100,1:100,diag(100)), ztools::dmnorm(matrix(1:100,nrow = 1),1:100,diag(100), is_prec = FALSE))
microbenchmark(mvtnorm::dmvnorm(1:100,1:100,diag(100)), ztools::dmnorm(matrix(1:100,nrow = 1),1:100,diag(100), is_prec = FALSE))
library(Rcpp)
library(RcppArmadillo)
cppFunction("
double logdet_sympd_C (arma::mat x) {
arma::mat cholx = chol(x);
arma::vec y = log(cholx.diag());
return 2 * sum(y);
}
" ,depends = 'RcppArmadillo')
cppFunction("
double logdet_eig (arma::mat x){
return sum(arma::log(arma::eig_sym(x)));
}
" ,depends = 'RcppArmadillo')
microbenchmark(logdet_eig(diag(100), logdet_sympd_C(diag(100))))
microbenchmark(logdet_eig(diag(100)), logdet_sympd_C(diag(100))))
microbenchmark(logdet_eig(diag(100)), logdet_sympd_C(diag(100)))
logdet_eig(diag(100)); logdet_sympd_C(diag(100))
logdet_eig(2*diag(100)); logdet_sympd_C(2*diag(100))
