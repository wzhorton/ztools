devtools::document()
# install preliminary package for function testing and documentation inspection
# setting build_vignettes = FALSE will considerably speed up installation.
# if built with vignettes, use browseVignettes("pkgname") to view.
devtools::install(build_vignettes = FALSE)
pkgbuild::compile_dll() #run if DLL error occurs
#### compile_pkg.R ####
# This file is meant for recompilation during development.
# For regular installation use devtools::install_github("user/pkgname")
# Use build_vignettes = TRUE in install_github to get html vignettes
library(roxygen2)
library(devtools)
rm(list = ls()) # cleans current environment
gc() # releases memory removed above
# pkgbuild::compile_dll() #run if DLL error occurs
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
# install preliminary package for function testing and documentation inspection
# setting build_vignettes = FALSE will considerably speed up installation.
# if built with vignettes, use browseVignettes("pkgname") to view.
devtools::install(build_vignettes = FALSE)
library(Rcpp, microbench)
cppFunction("
arma::mat cinv(arma::mat x){
return x.i();
}
", depends = "RcppArmadillo")
library(Rcpp, microbench, Matrix)
xx <- diag(100)
microbenchmark(cinv(xx),chol2inv(chol(XX)), solve(XX))
xx <- diag(100)
XX <- Diagonal(100)
microbenchmark(cinv(xx),chol2inv(chol(XX)), solve(XX))
microbenchmark(cinv(xx),chol2inv(chol(as(xx,"ddiMatrix"))), chol2inv(chol(as(xx,"diagonalMatrix"))))
microbenchmark(cinv(xx),chol2inv(chol(as(xx,"sparseMatrix"))), chol2inv(chol(as(xx,"diagonalMatrix"))))
microbenchmark(is(XX,"sparseMatrix"))
microbenchmark(is(xx,"sparseMatrix"))
cppFunction("
arma::mat cinv(arma::mat x){
return inv_sympd(x);
}
", depends = "RcppArmadillo")
microbenchmark(is(xx,"sparseMatrix"))
microbenchmark(is(XX,"sparseMatrix"))
microbenchmark(cinv(xx),chol2inv(chol(as(xx,"sparseMatrix"))), chol2inv(chol(as(xx,"diagonalMatrix"))))
xx <- 2*diag(100)
XX <- 2*Diagonal(100)
microbenchmark(cinv(xx),chol2inv(chol(as(xx,"sparseMatrix"))), chol2inv(chol(as(xx,"diagonalMatrix"))))
microbenchmark(cinv(xx),chol2inv(chol(XX)), chol2inv(chol(XX)))
microbenchmark(cinv(xx),chol2inv(chol(XX)))
XX <- diag(1:100)*Diagonal(100)
XX
xx <- diag(1:100)*diag(100)
XX <- diag(1:100)*Diagonal(100)
microbenchmark(cinv(xx),chol2inv(chol(XX)))
xx <- diag(1:100)*diag(100) + 1
XX <- diag(1:100)*Diagonal(100) + 1
microbenchmark(cinv(xx),chol2inv(chol(XX)))
rm(list = ls())
1/0
-1/0
log(0)
Inf/Inf
-Inf/0
cppFunction("
arma::vec crn(arma::vec mu, arma::mat cov, arma::vec z){
return mu + t(chol(cov))*z
}
", depends = "RcppArmadillo")
cppFunction("
arma::vec crn(arma::vec mu, arma::mat cov, arma::vec z){
return mu + chol(cov).t()*z
}
", depends = "RcppArmadillo")
cppFunction("
arma::vec crn(arma::vec mu, arma::mat cov, arma::vec z){
return mu + chol(cov).t()*z;
}
", depends = "RcppArmadillo")
microbenchmark(crn(1:100,diag(100), rnorm(100)), MASS::mvrnorm(1, 1:100, diag(100)), mvtnorm::rmvnorm(1, 1:100, diag(100)))
rm(crn)
#### compile_pkg.R ####
# This file is meant for recompilation during development.
# For regular installation use devtools::install_github("user/pkgname")
# Use build_vignettes = TRUE in install_github to get html vignettes
library(roxygen2)
library(devtools)
rm(list = ls()) # cleans current environment
gc() # releases memory removed above
# pkgbuild::compile_dll() #run if DLL error occurs
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
# install preliminary package for function testing and documentation inspection
# setting build_vignettes = FALSE will considerably speed up installation.
# if built with vignettes, use browseVignettes("pkgname") to view.
devtools::install(build_vignettes = FALSE)
warnings()
#### compile_pkg.R ####
# This file is meant for recompilation during development.
# For regular installation use devtools::install_github("user/pkgname")
# Use build_vignettes = TRUE in install_github to get html vignettes
library(roxygen2)
library(devtools)
rm(list = ls()) # cleans current environment
gc() # releases memory removed above
# pkgbuild::compile_dll() #run if DLL error occurs
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
# install preliminary package for function testing and documentation inspection
# setting build_vignettes = FALSE will considerably speed up installation.
# if built with vignettes, use browseVignettes("pkgname") to view.
devtools::install(build_vignettes = FALSE)
warnings()
#### compile_pkg.R ####
# This file is meant for recompilation during development.
# For regular installation use devtools::install_github("user/pkgname")
# Use build_vignettes = TRUE in install_github to get html vignettes
library(roxygen2)
library(devtools)
rm(list = ls()) # cleans current environment
gc() # releases memory removed above
# pkgbuild::compile_dll() #run if DLL error occurs
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
# install preliminary package for function testing and documentation inspection
# setting build_vignettes = FALSE will considerably speed up installation.
# if built with vignettes, use browseVignettes("pkgname") to view.
devtools::install(build_vignettes = FALSE)
ztools::rmnorm(1:10,diag(10))
#### compile_pkg.R ####
# This file is meant for recompilation during development.
# For regular installation use devtools::install_github("user/pkgname")
# Use build_vignettes = TRUE in install_github to get html vignettes
library(roxygen2)
library(devtools)
rm(list = ls()) # cleans current environment
gc() # releases memory removed above
# pkgbuild::compile_dll() #run if DLL error occurs
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
# install preliminary package for function testing and documentation inspection
# setting build_vignettes = FALSE will considerably speed up installation.
# if built with vignettes, use browseVignettes("pkgname") to view.
devtools::install(build_vignettes = FALSE)
LIBRARY(ZTOOLS)
library(ztools)
rmnorm(1:100, diag(100))
#### compile_pkg.R ####
# This file is meant for recompilation during development.
# For regular installation use devtools::install_github("user/pkgname")
# Use build_vignettes = TRUE in install_github to get html vignettes
library(roxygen2)
library(devtools)
rm(list = ls()) # cleans current environment
gc() # releases memory removed above
# pkgbuild::compile_dll() #run if DLL error occurs
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
# install preliminary package for function testing and documentation inspection
# setting build_vignettes = FALSE will considerably speed up installation.
# if built with vignettes, use browseVignettes("pkgname") to view.
devtools::install(build_vignettes = FALSE)
library(ztools)
rmnorm(1:100, diag(100))
det_sympd(diag(2))
det_sympd
Mahalanobis(1:10, 1:10, diag(10))
dmnorm(1:100,1:100, diag(100))
dmnorm(1:100,1:100, diag(100), unnorm = TRUE)
#### compile_pkg.R ####
# This file is meant for recompilation during development.
# For regular installation use devtools::install_github("user/pkgname")
# Use build_vignettes = TRUE in install_github to get html vignettes
library(roxygen2)
library(devtools)
rm(list = ls()) # cleans current environment
gc() # releases memory removed above
# pkgbuild::compile_dll() #run if DLL error occurs
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
# install preliminary package for function testing and documentation inspection
# setting build_vignettes = FALSE will considerably speed up installation.
# if built with vignettes, use browseVignettes("pkgname") to view.
devtools::install(build_vignettes = FALSE)
#### compile_pkg.R ####
# This file is meant for recompilation during development.
# For regular installation use devtools::install_github("user/pkgname")
# Use build_vignettes = TRUE in install_github to get html vignettes
library(roxygen2)
library(devtools)
rm(list = ls()) # cleans current environment
gc() # releases memory removed above
# pkgbuild::compile_dll() #run if DLL error occurs
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
# install preliminary package for function testing and documentation inspection
# setting build_vignettes = FALSE will considerably speed up installation.
# if built with vignettes, use browseVignettes("pkgname") to view.
devtools::install(build_vignettes = FALSE)
#### compile_pkg.R ####
# This file is meant for recompilation during development.
# For regular installation use devtools::install_github("user/pkgname")
# Use build_vignettes = TRUE in install_github to get html vignettes
library(roxygen2)
library(devtools)
rm(list = ls()) # cleans current environment
gc() # releases memory removed above
# pkgbuild::compile_dll() #run if DLL error occurs
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
# install preliminary package for function testing and documentation inspection
# setting build_vignettes = FALSE will considerably speed up installation.
# if built with vignettes, use browseVignettes("pkgname") to view.
devtools::install(build_vignettes = FALSE)
pkgbuild::compile_dll() #run if DLL error occurs
#### compile_pkg.R ####
# This file is meant for recompilation during development.
# For regular installation use devtools::install_github("user/pkgname")
# Use build_vignettes = TRUE in install_github to get html vignettes
library(roxygen2)
library(devtools)
rm(list = ls()) # cleans current environment
gc() # releases memory removed above
# pkgbuild::compile_dll() #run if DLL error occurs
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
# install preliminary package for function testing and documentation inspection
# setting build_vignettes = FALSE will considerably speed up installation.
# if built with vignettes, use browseVignettes("pkgname") to view.
devtools::install(build_vignettes = FALSE)
ztools::dmnorm(1:100, 1:100, diag(100))
ztools::dmnorm(1:100, 1:100, diag(100))
ztools::dmnorm(1:100, 1:100, diag(100))
ztools::dmnorm(1:100, 1:100, diag(100))
ztools::dmnorm(1:100, 1:100, diag(100))
ztools::dmnorm(1:100, 1:100, diag(100))
ztools::dmnorm(1:100, 1:100, diag(100))
ztools::dmnorm(1:100, 1:100, prec = diag(100))
ztools::rmnorm(1:100, diag(100))
ztools::det_sympd(diag(3))
ztools::Mahalanobis(1:100, 1:100, diag(100))
ztools::dmnorm(1:100, 1:100, diag(100))
ztools::rmnorm(1:100, diag(100))
ztools::rmnorm(1:100, 20*diag(100))
ztools::rmnorm(1:100, 20*diag(100))
ztools::rmnorm(1:100, 20*diag(100))
ztools::rmnorm(1:100, 20*diag(100))
ztools::rmnorm(1:100, 20*diag(100))
ztools::rmnorm(1:100, 20*diag(100))
ztools::rmnorm(1:100, 20*diag(100))
ztools::rmnorm(1:100, 20*diag(100))
ztools::rmnorm(1:100, 20*diag(100))
ztools::rmnorm(1:100, 200*diag(100))
ztools::rmnorm(1:100, 200*diag(100))
ztools::rmnorm(1:100, 200*diag(100))
ztools::rmnorm(1:100, 200*diag(100))
ztools::rmnorm(1:100, 200*diag(100))
ztools::rmnorm(1:100, 200*diag(100))
ztools::rmnorm(1:100, prec = 200*diag(100))
ztools::rmnorm(1:100, prec = 200*diag(100))
ztools::rmnorm(1:100, prec = 200*diag(100))
ztools::rmnorm(1:100, prec = 200*diag(100))
ztools::rmnorm(1:100, prec = 200*diag(100))
ztools::rmnorm(1:100, prec = 200*diag(100))
ztools::rmnorm(1:100, prec = 200*diag(100))
sapply(1:1000,function(i) ztools::rmnorm(1:100, prec = 200*diag(100)))
dim(sapply(1:1000,function(i) ztools::rmnorm(1:100, prec = 200*diag(100))))
var(t(sapply(1:1000,function(i) ztools::rmnorm(1:100, prec = 200*diag(100)))))
var(t(sapply(1:1000,function(i) ztools::rmnorm(1:100, prec = 2*diag(100)))))
var(t(sapply(1:1000,function(i) ztools::rmnorm(1:100, cov = 2*diag(100)))))
#### compile_pkg.R ####
# This file is meant for recompilation during development.
# For regular installation use devtools::install_github("user/pkgname")
# Use build_vignettes = TRUE in install_github to get html vignettes
library(roxygen2)
library(devtools)
rm(list = ls()) # cleans current environment
gc() # releases memory removed above
# pkgbuild::compile_dll() #run if DLL error occurs
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
# install preliminary package for function testing and documentation inspection
# setting build_vignettes = FALSE will considerably speed up installation.
# if built with vignettes, use browseVignettes("pkgname") to view.
devtools::install(build_vignettes = FALSE)
#### compile_pkg.R ####
# This file is meant for recompilation during development.
# For regular installation use devtools::install_github("user/pkgname")
# Use build_vignettes = TRUE in install_github to get html vignettes
library(roxygen2)
library(devtools)
rm(list = ls()) # cleans current environment
gc() # releases memory removed above
# pkgbuild::compile_dll() #run if DLL error occurs
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
# install preliminary package for function testing and documentation inspection
# setting build_vignettes = FALSE will considerably speed up installation.
# if built with vignettes, use browseVignettes("pkgname") to view.
devtools::install(build_vignettes = FALSE)
ztools::update_normal_invgamma(rnorm(100), .1,.1, rep(0,100). diag(100))
ztools::update_normal_invgamma(rnorm(100), .1,.1, rep(0,100), diag(100))
ztools::update_normal_invgamma(rnorm(100), .1,.1, rep(0,100), diag(100))
ztools::update_normal_invgamma(rnorm(100), .1,.1, rep(0,100), diag(100))
ztools::update_normal_invgamma(rnorm(100), .1,.1, rep(0,100), diag(100))
ztools::update_normal_invgamma(rnorm(100), .1,.1, rep(0,100), diag(100))
ztools::update_normal_invgamma(rnorm(100), .1,.1, rep(0,100), diag(100))
ztools::update_normal_invgamma(rnorm(100), .1,.1, rep(0,100), diag(100))
ztools::update_normal_invgamma(rnorm(100), .1,.1, rep(0,100), diag(100))
ztools::update_normal_invgamma(rnorm(100, 0, 100), .1,.1, rep(0,100), diag(100))
ztools::update_normal_invgamma(rnorm(100, 0, 100), .1,.1, rep(0,100), diag(100))
ztools::update_normal_invgamma(rnorm(100, 0, 100), .1,.1, rep(0,100), diag(100))
ztools::update_normal_invgamma(rnorm(100, 0, 100), .1,.1, rep(0,100), diag(100))
ztools::update_normal_invgamma(rnorm(100, 0, 100), .1,.1, rep(0,100), diag(100))
ztools::update_normal_invgamma(rnorm(100, 0, 100), .1,.1, rep(0,100), diag(100))
ztools::update_normal_invgamma(rnorm(100, 0, 100), .1,.1, rep(0,100), prec = diag(100))
ztools::update_normal_invgamma(rnorm(100, 0, 100), .1,.1, rep(0,100), R_inv = diag(100))
ztools::update_normal_invgamma(rnorm(100, 0, 100), .1,.1, rep(0,100), R_inv = diag(100))
ztools::update_normal_invgamma(rnorm(100, 0, 100), .1,.1, rep(0,100), R_inv = diag(100))
ztools::update_normal_invgamma(rnorm(100, 0, 100), .1,.1, rep(0,100), R_inv = diag(100))
ztools::update_normal_invgamma(rnorm(100, 0, 100), .1,.1, rep(0,100), R_inv = diag(100))
ztools::update_normal_invgamma(rnorm(100, 0, 100), .1,.1, rep(0,100), R_inv = diag(100))
ztools::update_normal_invgamma(rnorm(100, 0, 100), .1,.1, rep(0,100), R_inv = diag(100))
ztools::update_normal_invgamma(rnorm(100, 0, 100), .1,.1, rep(0,100), R_inv = diag(100))
ztools::update_normal_normal(rnorm(100), cbind(1,rnorm(100)), Sig = diag(100), V = diag(2))
#### compile_pkg.R ####
# This file is meant for recompilation during development.
# For regular installation use devtools::install_github("user/pkgname")
# Use build_vignettes = TRUE in install_github to get html vignettes
library(roxygen2)
library(devtools)
rm(list = ls()) # cleans current environment
gc() # releases memory removed above
# pkgbuild::compile_dll() #run if DLL error occurs
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
# install preliminary package for function testing and documentation inspection
# setting build_vignettes = FALSE will considerably speed up installation.
# if built with vignettes, use browseVignettes("pkgname") to view.
devtools::install(build_vignettes = FALSE)
ztools::update_normal_normal(rnorm(100), cbind(1,rnorm(100)), Sig = diag(100), V = diag(2))
pkgbuild::compile_dll() #run if DLL error occurs
#### compile_pkg.R ####
# This file is meant for recompilation during development.
# For regular installation use devtools::install_github("user/pkgname")
# Use build_vignettes = TRUE in install_github to get html vignettes
library(roxygen2)
library(devtools)
rm(list = ls()) # cleans current environment
gc() # releases memory removed above
# pkgbuild::compile_dll() #run if DLL error occurs
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
# install preliminary package for function testing and documentation inspection
# setting build_vignettes = FALSE will considerably speed up installation.
# if built with vignettes, use browseVignettes("pkgname") to view.
devtools::install(build_vignettes = FALSE)
ztools::update_normal_normal(rnorm(100), cbind(1,rnorm(100)), Sig = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), rnorm(100), cbind(1,rnorm(100)), Sig = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), rnorm(100), cbind(1,rnorm(100)), Sig = diag(100), V = diag(2))
cbind(1,rnorm(10))
ncol(cbind(1,rnorm(10)))
is.vector(cbind(1,rnorm(10)))
ztools::update_normal_normal(z = rnorm(2), rnorm(100), cbind(1,rnorm(100)), Sig = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), rep(0,100), Sig = diag(100), V = diag(2))
#### compile_pkg.R ####
# This file is meant for recompilation during development.
# For regular installation use devtools::install_github("user/pkgname")
# Use build_vignettes = TRUE in install_github to get html vignettes
library(roxygen2)
library(devtools)
rm(list = ls()) # cleans current environment
gc() # releases memory removed above
# pkgbuild::compile_dll() #run if DLL error occurs
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
# install preliminary package for function testing and documentation inspection
# setting build_vignettes = FALSE will considerably speed up installation.
# if built with vignettes, use browseVignettes("pkgname") to view.
devtools::install(build_vignettes = FALSE)
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), rep(0,100), Sig = diag(100), V = diag(2))
#### compile_pkg.R ####
# This file is meant for recompilation during development.
# For regular installation use devtools::install_github("user/pkgname")
# Use build_vignettes = TRUE in install_github to get html vignettes
library(roxygen2)
library(devtools)
rm(list = ls()) # cleans current environment
gc() # releases memory removed above
# pkgbuild::compile_dll() #run if DLL error occurs
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
# install preliminary package for function testing and documentation inspection
# setting build_vignettes = FALSE will considerably speed up installation.
# if built with vignettes, use browseVignettes("pkgname") to view.
devtools::install(build_vignettes = FALSE)
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), rep(0,100), Sig = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), rep(0,2), Sig = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), rep(0,2), Sig = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), rep(0,2), Sig = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), rep(0,2), Sig = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), rep(0,2), Sig = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), rep(0,2), Sig = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), rep(0,2), Sig = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), rep(0,2), Sig = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), rep(0,2), Sig = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), rep(0,2), Sig = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), rep(0,2), Sig_inv = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), rep(0,2), Sig_inv = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), rep(0,2), Sig_inv = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), rep(0,2), Sig_inv = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), rep(0,2), Sig_inv = diag(100), V_inv = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), rep(0,2), Sig_inv = diag(100), V_inv = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), rep(0,2), Sig_inv = diag(100), V_inv = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), rep(0,2), Sig_inv = diag(100), V_inv = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), rep(0,2), Sig_inv = diag(100), V_inv = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), c(0,0), Sig = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), c(0,0), Sig = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), c(0,0), Sig = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), c(0,0), Sig = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), c(0,0), Sig = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), c(0,0), Sig = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), c(0,0), Sig = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), c(0,0), Sig = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), c(0,0), Sig = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), c(0,0), Sig = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), c(0,0), Sig = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), c(0,0), Sig = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), c(0,0), Sig = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), c(0,0), Sig = diag(100), V = diag(2))
ztools::update_normal_normal(rnorm(100), cbind(1, rnorm(100)), c(0,0), Sig = diag(100), V = diag(2))
#### compile_pkg.R ####
# This file is meant for recompilation during development.
# For regular installation use devtools::install_github("user/pkgname")
# Use build_vignettes = TRUE in install_github to get html vignettes
library(roxygen2)
library(devtools)
rm(list = ls()) # cleans current environment
gc() # releases memory removed above
# pkgbuild::compile_dll() #run if DLL error occurs
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
# install preliminary package for function testing and documentation inspection
# setting build_vignettes = FALSE will considerably speed up installation.
# if built with vignettes, use browseVignettes("pkgname") to view.
devtools::install(build_vignettes = FALSE)
ztools::update_gaussian_process(1:2, 1:2, seq(0,3, len = 10), function(x) 0, function(d) exp(d^2))
pkgbuild::compile_dll() #run if DLL error occurs or if new C functions don't appear
#### compile_pkg.R ####
# This file is meant for recompilation during development.
# For regular installation use devtools::install_github("user/pkgname")
# Use build_vignettes = TRUE in install_github to get html vignettes
library(roxygen2)
library(devtools)
rm(list = ls()) # cleans current environment
gc() # releases memory removed above
# pkgbuild::compile_dll() #run if DLL error occurs or if new C functions don't appear
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
# install preliminary package for function testing and documentation inspection
# setting build_vignettes = FALSE will considerably speed up installation.
# if built with vignettes, use browseVignettes("pkgname") to view.
devtools::install(build_vignettes = FALSE)
ztools::update_gaussian_process(1:2, 1:2, seq(0,3, len = 10), function(x) 0, function(d) exp(d^2))
ztools::update_gaussian_process(1:2, 1:2, seq(0,3, len = 10), function(x) 0, function(d) exp(d^2))
update_gaussian_process <- function(x, y, time, mnfun, covfun) {
R <- covfun(fields::rdist(c(time,x)))
m <- length(time)
f <- length(x)
R11 <- R[1:m,1:m]
R22 <- R[(m+1):(m+f),(m+1):(m+f)]
R12 <- R[1:m,(m+1):(m+f)]
mu1 <- mnfun(time)
mu2 <- mnfun(x); browser()
up_mean <- .update_gp_mean_C(y, mu1, mu2, R12, R22)
up_var <- .update_gp_var_C(R11, R12, R22)
return(list(up_mean = as.numeric(up_mean), up_var = up_var))
}
update_gaussian_process(1:2, 1:2, seq(0,3, len = 10), function(x) 0, function(d) exp(d^2))
mu2
ztools::update_gaussian_process(1:2, 1:2, seq(0,3, len = 10), function(x) rep(0,length(x)), function(d) exp(d^2))
#### compile_pkg.R ####
# This file is meant for recompilation during development.
# For regular installation use devtools::install_github("user/pkgname")
# Use build_vignettes = TRUE in install_github to get html vignettes
library(roxygen2)
library(devtools)
rm(list = ls()) # cleans current environment
gc() # releases memory removed above
# pkgbuild::compile_dll() #run if DLL error occurs or if new C functions don't appear
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
# install preliminary package for function testing and documentation inspection
# setting build_vignettes = FALSE will considerably speed up installation.
# if built with vignettes, use browseVignettes("pkgname") to view.
devtools::install(build_vignettes = FALSE)
pkgbuild::compile_dll() #run if DLL error occurs or if new C functions don't appear
#### compile_pkg.R ####
# This file is meant for recompilation during development.
# For regular installation use devtools::install_github("user/pkgname")
# Use build_vignettes = TRUE in install_github to get html vignettes
library(roxygen2)
library(devtools)
rm(list = ls()) # cleans current environment
gc() # releases memory removed above
# pkgbuild::compile_dll() #run if DLL error occurs or if new C functions don't appear
# create NAMESPACE and .Rd files for documentation. Compile C files if any.
devtools::document()
# install preliminary package for function testing and documentation inspection
# setting build_vignettes = FALSE will considerably speed up installation.
# if built with vignettes, use browseVignettes("pkgname") to view.
devtools::install(build_vignettes = FALSE)
