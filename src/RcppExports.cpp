// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// det_sympd
double det_sympd(arma::mat x, bool Log);
RcppExport SEXP _ztools_det_sympd(SEXP xSEXP, SEXP LogSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type Log(LogSEXP);
    rcpp_result_gen = Rcpp::wrap(det_sympd(x, Log));
    return rcpp_result_gen;
END_RCPP
}
// Mahalanobis
arma::vec Mahalanobis(arma::mat x, arma::rowvec center, arma::mat covprec, bool is_prec);
RcppExport SEXP _ztools_Mahalanobis(SEXP xSEXP, SEXP centerSEXP, SEXP covprecSEXP, SEXP is_precSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type center(centerSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covprec(covprecSEXP);
    Rcpp::traits::input_parameter< bool >::type is_prec(is_precSEXP);
    rcpp_result_gen = Rcpp::wrap(Mahalanobis(x, center, covprec, is_prec));
    return rcpp_result_gen;
END_RCPP
}
// dmnorm
arma::vec dmnorm(arma::vec x, arma::rowvec mu, arma::mat covprec, bool is_prec, bool unnorm, bool log);
RcppExport SEXP _ztools_dmnorm(SEXP xSEXP, SEXP muSEXP, SEXP covprecSEXP, SEXP is_precSEXP, SEXP unnormSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covprec(covprecSEXP);
    Rcpp::traits::input_parameter< bool >::type is_prec(is_precSEXP);
    Rcpp::traits::input_parameter< bool >::type unnorm(unnormSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(dmnorm(x, mu, covprec, is_prec, unnorm, log));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ztools_det_sympd", (DL_FUNC) &_ztools_det_sympd, 2},
    {"_ztools_Mahalanobis", (DL_FUNC) &_ztools_Mahalanobis, 4},
    {"_ztools_dmnorm", (DL_FUNC) &_ztools_dmnorm, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_ztools(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
