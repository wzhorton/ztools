// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// det_sympd
double det_sympd(arma::mat x, bool Log);
RcppExport SEXP _ztools_det_sympd(SEXP xSEXP, SEXP LogSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type Log(LogSEXP);
    rcpp_result_gen = Rcpp::wrap(det_sympd(x, Log));
    return rcpp_result_gen;
END_RCPP
}
// Mahalanobis
arma::vec Mahalanobis(arma::mat x, arma::rowvec center, arma::mat covprec, bool is_prec);
RcppExport SEXP _ztools_Mahalanobis(SEXP xSEXP, SEXP centerSEXP, SEXP covprecSEXP, SEXP is_precSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type center(centerSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covprec(covprecSEXP);
    Rcpp::traits::input_parameter< bool >::type is_prec(is_precSEXP);
    rcpp_result_gen = Rcpp::wrap(Mahalanobis(x, center, covprec, is_prec));
    return rcpp_result_gen;
END_RCPP
}
// dmnorm
arma::vec dmnorm(arma::mat x, arma::rowvec mu, arma::mat covprec, bool is_prec, bool unnorm, bool log);
RcppExport SEXP _ztools_dmnorm(SEXP xSEXP, SEXP muSEXP, SEXP covprecSEXP, SEXP is_precSEXP, SEXP unnormSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covprec(covprecSEXP);
    Rcpp::traits::input_parameter< bool >::type is_prec(is_precSEXP);
    Rcpp::traits::input_parameter< bool >::type unnorm(unnormSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(dmnorm(x, mu, covprec, is_prec, unnorm, log));
    return rcpp_result_gen;
END_RCPP
}
// rmnorm
arma::vec rmnorm(arma::vec z, arma::vec mu, arma::mat covprec, bool is_prec);
RcppExport SEXP _ztools_rmnorm(SEXP zSEXP, SEXP muSEXP, SEXP covprecSEXP, SEXP is_precSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type covprec(covprecSEXP);
    Rcpp::traits::input_parameter< bool >::type is_prec(is_precSEXP);
    rcpp_result_gen = Rcpp::wrap(rmnorm(z, mu, covprec, is_prec));
    return rcpp_result_gen;
END_RCPP
}
// update_nn
arma::vec update_nn(arma::vec z, arma::vec y, arma::mat X, arma::vec mu, arma::mat Sig, bool inv_Sig, arma::mat V, bool inv_V);
RcppExport SEXP _ztools_update_nn(SEXP zSEXP, SEXP ySEXP, SEXP XSEXP, SEXP muSEXP, SEXP SigSEXP, SEXP inv_SigSEXP, SEXP VSEXP, SEXP inv_VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< bool >::type inv_Sig(inv_SigSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< bool >::type inv_V(inv_VSEXP);
    rcpp_result_gen = Rcpp::wrap(update_nn(z, y, X, mu, Sig, inv_Sig, V, inv_V));
    return rcpp_result_gen;
END_RCPP
}
// update_gp_mean
arma::vec update_gp_mean(arma::vec y, arma::vec mu1, arma::vec mu2, arma::mat R12, arma::mat R22);
RcppExport SEXP _ztools_update_gp_mean(SEXP ySEXP, SEXP mu1SEXP, SEXP mu2SEXP, SEXP R12SEXP, SEXP R22SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R12(R12SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R22(R22SEXP);
    rcpp_result_gen = Rcpp::wrap(update_gp_mean(y, mu1, mu2, R12, R22));
    return rcpp_result_gen;
END_RCPP
}
// update_gp_var
arma::mat update_gp_var(arma::mat R11, arma::mat R12, arma::mat R22);
RcppExport SEXP _ztools_update_gp_var(SEXP R11SEXP, SEXP R12SEXP, SEXP R22SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type R11(R11SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R12(R12SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R22(R22SEXP);
    rcpp_result_gen = Rcpp::wrap(update_gp_var(R11, R12, R22));
    return rcpp_result_gen;
END_RCPP
}
// bs_even
arma::mat bs_even(arma::vec time, int nk);
RcppExport SEXP _ztools_bs_even(SEXP timeSEXP, SEXP nkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type time(timeSEXP);
    Rcpp::traits::input_parameter< int >::type nk(nkSEXP);
    rcpp_result_gen = Rcpp::wrap(bs_even(time, nk));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ztools_det_sympd", (DL_FUNC) &_ztools_det_sympd, 2},
    {"_ztools_Mahalanobis", (DL_FUNC) &_ztools_Mahalanobis, 4},
    {"_ztools_dmnorm", (DL_FUNC) &_ztools_dmnorm, 6},
    {"_ztools_rmnorm", (DL_FUNC) &_ztools_rmnorm, 4},
    {"_ztools_update_nn", (DL_FUNC) &_ztools_update_nn, 8},
    {"_ztools_update_gp_mean", (DL_FUNC) &_ztools_update_gp_mean, 5},
    {"_ztools_update_gp_var", (DL_FUNC) &_ztools_update_gp_var, 3},
    {"_ztools_bs_even", (DL_FUNC) &_ztools_bs_even, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_ztools(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
